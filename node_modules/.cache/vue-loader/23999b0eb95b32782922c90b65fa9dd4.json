{"remainingRequest":"C:\\k1-services\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\k1-services\\src\\pages\\OEA\\views\\inspecaocontainer.vue?vue&type=template&id=62c9bccc&scoped=true&","dependencies":[{"path":"C:\\k1-services\\src\\pages\\OEA\\views\\inspecaocontainer.vue","mtime":1703038179050},{"path":"C:\\k1-services\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1670977934221},{"path":"C:\\k1-services\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1674603024186},{"path":"C:\\k1-services\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1670977934221},{"path":"C:\\k1-services\\node_modules\\vue-loader\\lib\\index.js","mtime":1674603023821}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}