{"remainingRequest":"C:\\k1-services\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\k1-services\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\k1-services\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\k1-services\\src\\components\\CameraCapture.vue?vue&type=template&id=36f5a3e1&scoped=true&","dependencies":[{"path":"C:\\k1-services\\src\\components\\CameraCapture.vue","mtime":1701906516396},{"path":"C:\\k1-services\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1670977934221},{"path":"C:\\k1-services\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1674603024186},{"path":"C:\\k1-services\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1670977934221},{"path":"C:\\k1-services\\node_modules\\vue-loader\\lib\\index.js","mtime":1674603023821}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}