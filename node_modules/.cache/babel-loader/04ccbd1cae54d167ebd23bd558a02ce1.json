{"remainingRequest":"C:\\k1-services\\node_modules\\babel-loader\\lib\\index.js!C:\\k1-services\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\k1-services\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\k1-services\\node_modules\\vue-quaggajs\\src\\Scanner.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\k1-services\\node_modules\\vue-quaggajs\\src\\Scanner.vue","mtime":1670977936060},{"path":"C:\\k1-services\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1670977934221},{"path":"C:\\k1-services\\node_modules\\babel-loader\\lib\\index.js","mtime":1670977935138},{"path":"C:\\k1-services\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1670977934221},{"path":"C:\\k1-services\\node_modules\\vue-loader\\lib\\index.js","mtime":1674603023821}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBRdWFnZ2EgZnJvbSAncXVhZ2dhJzsKZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdRdWFnZ2FTY2FubmVyJywKICBwcm9wczogewogICAgb25EZXRlY3RlZDogewogICAgICB0eXBlOiBGdW5jdGlvbiwKICAgICAgZGVmYXVsdChyZXN1bHQpIHsKICAgICAgICBjb25zb2xlLmxvZygnZGV0ZWN0ZWQ6ICcsIHJlc3VsdCk7CiAgICAgIH0KICAgIH0sCiAgICBvblByb2Nlc3NlZDogewogICAgICB0eXBlOiBGdW5jdGlvbiwKICAgICAgZGVmYXVsdChyZXN1bHQpIHsKICAgICAgICBsZXQgZHJhd2luZ0N0eCA9IFF1YWdnYS5jYW52YXMuY3R4Lm92ZXJsYXk7CiAgICAgICAgbGV0IGRyYXdpbmdDYW52YXMgPSBRdWFnZ2EuY2FudmFzLmRvbS5vdmVybGF5OwogICAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICAgIGlmIChyZXN1bHQuYm94ZXMpIHsKICAgICAgICAgICAgZHJhd2luZ0N0eC5jbGVhclJlY3QoMCwgMCwgcGFyc2VJbnQoZHJhd2luZ0NhbnZhcy5nZXRBdHRyaWJ1dGUoJ3dpZHRoJykpLCBwYXJzZUludChkcmF3aW5nQ2FudmFzLmdldEF0dHJpYnV0ZSgnaGVpZ2h0JykpKTsKICAgICAgICAgICAgcmVzdWx0LmJveGVzLmZpbHRlcihmdW5jdGlvbiAoYm94KSB7CiAgICAgICAgICAgICAgcmV0dXJuIGJveCAhPT0gcmVzdWx0LmJveDsKICAgICAgICAgICAgfSkuZm9yRWFjaChmdW5jdGlvbiAoYm94KSB7CiAgICAgICAgICAgICAgUXVhZ2dhLkltYWdlRGVidWcuZHJhd1BhdGgoYm94LCB7CiAgICAgICAgICAgICAgICB4OiAwLAogICAgICAgICAgICAgICAgeTogMQogICAgICAgICAgICAgIH0sIGRyYXdpbmdDdHgsIHsKICAgICAgICAgICAgICAgIGNvbG9yOiAnZ3JlZW4nLAogICAgICAgICAgICAgICAgbGluZVdpZHRoOiAyCiAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgfQogICAgICAgICAgaWYgKHJlc3VsdC5ib3gpIHsKICAgICAgICAgICAgUXVhZ2dhLkltYWdlRGVidWcuZHJhd1BhdGgocmVzdWx0LmJveCwgewogICAgICAgICAgICAgIHg6IDAsCiAgICAgICAgICAgICAgeTogMQogICAgICAgICAgICB9LCBkcmF3aW5nQ3R4LCB7CiAgICAgICAgICAgICAgY29sb3I6ICcjMDBGJywKICAgICAgICAgICAgICBsaW5lV2lkdGg6IDIKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgICBpZiAocmVzdWx0LmNvZGVSZXN1bHQgJiYgcmVzdWx0LmNvZGVSZXN1bHQuY29kZSkgewogICAgICAgICAgICBRdWFnZ2EuSW1hZ2VEZWJ1Zy5kcmF3UGF0aChyZXN1bHQubGluZSwgewogICAgICAgICAgICAgIHg6ICd4JywKICAgICAgICAgICAgICB5OiAneScKICAgICAgICAgICAgfSwgZHJhd2luZ0N0eCwgewogICAgICAgICAgICAgIGNvbG9yOiAncmVkJywKICAgICAgICAgICAgICBsaW5lV2lkdGg6IDMKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICB9LAogICAgcmVhZGVyVHlwZXM6IHsKICAgICAgdHlwZTogQXJyYXksCiAgICAgIGRlZmF1bHQ6ICgpID0+IFsnY29kZV8xMjhfcmVhZGVyJ10KICAgIH0sCiAgICByZWFkZXJTaXplOiB7CiAgICAgIHR5cGU6IE9iamVjdCwKICAgICAgZGVmYXVsdDogKCkgPT4gKHsKICAgICAgICB3aWR0aDogNjQwLAogICAgICAgIGhlaWdodDogNDgwCiAgICAgIH0pLAogICAgICB2YWxpZGF0b3I6IG8gPT4gdHlwZW9mIG8ud2lkdGggPT09ICdudW1iZXInICYmIHR5cGVvZiBvLmhlaWdodCA9PT0gJ251bWJlcicKICAgIH0sCiAgICBhc3BlY3RSYXRpbzogewogICAgICB0eXBlOiBPYmplY3QsCiAgICAgIGRlZmF1bHQ6ICgpID0+ICh7CiAgICAgICAgbWluOiAxLAogICAgICAgIG1heDogMgogICAgICB9KSwKICAgICAgdmFsaWRhdG9yOiBvID0+IHR5cGVvZiBvLm1pbiA9PT0gJ251bWJlcicgJiYgdHlwZW9mIG8ubWF4ID09PSAnbnVtYmVyJwogICAgfQogIH0sCiAgZGF0YTogZnVuY3Rpb24gKCkgewogICAgcmV0dXJuIHsKICAgICAgcXVhZ2dhU3RhdGU6IHsKICAgICAgICBpbnB1dFN0cmVhbTogewogICAgICAgICAgdHlwZTogJ0xpdmVTdHJlYW0nLAogICAgICAgICAgY29uc3RyYWludHM6IHsKICAgICAgICAgICAgd2lkdGg6IHsKICAgICAgICAgICAgICBtaW46IHRoaXMucmVhZGVyU2l6ZS53aWR0aAogICAgICAgICAgICB9LAogICAgICAgICAgICBoZWlnaHQ6IHsKICAgICAgICAgICAgICBtaW46IHRoaXMucmVhZGVyU2l6ZS5oZWlnaHQKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZmFjaW5nTW9kZTogJ2Vudmlyb25tZW50JywKICAgICAgICAgICAgYXNwZWN0UmF0aW86IHsKICAgICAgICAgICAgICBtaW46IDEsCiAgICAgICAgICAgICAgbWF4OiAyCiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIGxvY2F0b3I6IHsKICAgICAgICAgIHBhdGNoU2l6ZTogJ21lZGl1bScsCiAgICAgICAgICBoYWxmU2FtcGxlOiB0cnVlCiAgICAgICAgfSwKICAgICAgICBudW1PZldvcmtlcnM6IDIsCiAgICAgICAgZnJlcXVlbmN5OiAxMCwKICAgICAgICBkZWNvZGVyOiB7CiAgICAgICAgICByZWFkZXJzOiB0aGlzLnJlYWRlclR5cGVzCiAgICAgICAgfSwKICAgICAgICBsb2NhdGU6IHRydWUKICAgICAgfQogICAgfTsKICB9LAogIHdhdGNoOiB7CiAgICBvbkRldGVjdGVkOiBmdW5jdGlvbiAob2xkVmFsdWUsIG5ld1ZhbHVlKSB7CiAgICAgIGlmIChvbGRWYWx1ZSkgUXVhZ2dhLm9mZkRldGVjdGVkKG9sZFZhbHVlKTsKICAgICAgaWYgKG5ld1ZhbHVlKSBRdWFnZ2Eub25EZXRlY3RlZChuZXdWYWx1ZSk7CiAgICB9LAogICAgb25Qcm9jZXNzZWQ6IGZ1bmN0aW9uIChvbGRWYWx1ZSwgbmV3VmFsdWUpIHsKICAgICAgaWYgKG9sZFZhbHVlKSBRdWFnZ2Eub2ZmUHJvY2Vzc2VkKG9sZFZhbHVlKTsKICAgICAgaWYgKG5ld1ZhbHVlKSBRdWFnZ2Eub25Qcm9jZXNzZWQobmV3VmFsdWUpOwogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gKCkgewogICAgUXVhZ2dhLmluaXQodGhpcy5xdWFnZ2FTdGF0ZSwgZnVuY3Rpb24gKGVycikgewogICAgICBpZiAoZXJyKSB7CiAgICAgICAgcmV0dXJuIGNvbnNvbGUuZXJyb3IoZXJyKTsKICAgICAgfQogICAgICBRdWFnZ2Euc3RhcnQoKTsKICAgIH0pOwogICAgUXVhZ2dhLm9uRGV0ZWN0ZWQodGhpcy5vbkRldGVjdGVkKTsKICAgIFF1YWdnYS5vblByb2Nlc3NlZCh0aGlzLm9uUHJvY2Vzc2VkKTsKICB9LAogIGRlc3Ryb3llZDogZnVuY3Rpb24gKCkgewogICAgaWYgKHRoaXMub25EZXRlY3RlZCkgUXVhZ2dhLm9mZkRldGVjdGVkKHRoaXMub25EZXRlY3RlZCk7CiAgICBpZiAodGhpcy5vblByb2Nlc3NlZCkgUXVhZ2dhLm9mZlByb2Nlc3NlZCh0aGlzLm9mZlByb2Nlc3NlZCk7CiAgICBRdWFnZ2Euc3RvcCgpOwogIH0KfTs="},{"version":3,"mappings":";;;;;;;;AAQA;AAEA;EACAA;EACAC;IACAC;MACAC;MACAC;QACAC;MACA;IACA;IACAC;MACAH;MACAC;QACA;QAEA;QAEA;UACA;YACAG,qBACA,GACA,GACAC,+CACAA,+CACA;YACAC,aACAC;cACA;YACA,GACAC;cACAC;gBAAAC;gBAAAC;cAAA;gBACAC;gBACAC;cACA;YACA;UACA;UACA;YACAJ;cAAAC;cAAAC;YAAA;cACAC;cACAC;YACA;UACA;UAEA;YACAJ,2BACAH,aACA;cAAAI;cAAAC;YAAA,GACAP,YACA;cAAAQ;cAAAC;YAAA,EACA;UACA;QACA;MACA;IACA;IACAC;MACAd;MACAC;IACA;IACAc;MACAf;MACAC;QACAe;QACAC;MACA;MACAC,gBACA;IACA;IACAC;MACAnB;MACAC;QACAmB;QACAC;MACA;MACAH;IACA;EACA;EACAI;IACA;MACAC;QACAC;UACAxB;UACAyB;YACAT;cAAAI;YAAA;YACAH;cAAAG;YAAA;YACAM;YACAP;cAAAC;cAAAC;YAAA;UACA;QACA;QACAM;UACAC;UACAC;QACA;QACAC;QACAC;QACAC;UACAC;QACA;QACAC;MACA;IACA;EACA;EACAC;IACApC;MACA;MACA;IACA;IACAI;MACA;MACA;IACA;EACA;EACAiC;IACA3B;MACA;QACA;MACA;MACAA;IACA;IACAA;IACAA;EACA;EACA4B;IACA;IACA;IACA5B;EACA;AACA","names":["name","props","onDetected","type","default","console","onProcessed","drawingCtx","parseInt","result","filter","forEach","Quagga","x","y","color","lineWidth","readerTypes","readerSize","width","height","validator","aspectRatio","min","max","data","quaggaState","inputStream","constraints","facingMode","locator","patchSize","halfSample","numOfWorkers","frequency","decoder","readers","locate","watch","mounted","destroyed"],"sourceRoot":"node_modules/vue-quaggajs/src","sources":["Scanner.vue"],"sourcesContent":["<template>\n  <div id=\"interactive\" class=\"viewport scanner\">\n    <video />\n    <canvas class=\"drawingBuffer\" />\n  </div>\n</template>\n\n<script>\nimport Quagga from 'quagga';\n\nexport default {\n  name: 'QuaggaScanner',\n  props: {\n    onDetected: {\n      type: Function,\n      default(result) {\n        console.log('detected: ', result);\n      },\n    },\n    onProcessed: {\n      type: Function,\n      default(result) {\n        let drawingCtx = Quagga.canvas.ctx.overlay;\n\n        let drawingCanvas = Quagga.canvas.dom.overlay;\n\n        if (result) {\n          if (result.boxes) {\n            drawingCtx.clearRect(\n              0,\n              0,\n              parseInt(drawingCanvas.getAttribute('width')),\n              parseInt(drawingCanvas.getAttribute('height'))\n            );\n            result.boxes\n              .filter(function(box) {\n                return box !== result.box;\n              })\n              .forEach(function(box) {\n                Quagga.ImageDebug.drawPath(box, { x: 0, y: 1 }, drawingCtx, {\n                  color: 'green',\n                  lineWidth: 2,\n                });\n              });\n          }\n          if (result.box) {\n            Quagga.ImageDebug.drawPath(result.box, { x: 0, y: 1 }, drawingCtx, {\n              color: '#00F',\n              lineWidth: 2,\n            });\n          }\n\n          if (result.codeResult && result.codeResult.code) {\n            Quagga.ImageDebug.drawPath(\n              result.line,\n              { x: 'x', y: 'y' },\n              drawingCtx,\n              { color: 'red', lineWidth: 3 }\n            );\n          }\n        }\n      },\n    },\n    readerTypes: {\n      type: Array,\n      default: () => ['code_128_reader'],\n    },\n    readerSize: {\n      type: Object,\n      default: () => ({\n        width: 640,\n        height: 480,\n      }),\n      validator: o =>\n        typeof o.width === 'number' && typeof o.height === 'number',\n    },\n    aspectRatio: {\n      type: Object,\n      default: () => ({\n        min: 1,\n        max: 2,\n      }),\n      validator: o => typeof o.min === 'number' && typeof o.max === 'number',\n    },\n  },\n  data: function() {\n    return {\n      quaggaState: {\n        inputStream: {\n          type: 'LiveStream',\n          constraints: {\n            width: { min: this.readerSize.width },\n            height: { min: this.readerSize.height },\n            facingMode: 'environment',\n            aspectRatio: { min: 1, max: 2 },\n          },\n        },\n        locator: {\n          patchSize: 'medium',\n          halfSample: true,\n        },\n        numOfWorkers: 2,\n        frequency: 10,\n        decoder: {\n          readers: this.readerTypes,\n        },\n        locate: true,\n      },\n    };\n  },\n  watch: {\n    onDetected: function(oldValue, newValue) {\n      if (oldValue) Quagga.offDetected(oldValue);\n      if (newValue) Quagga.onDetected(newValue);\n    },\n    onProcessed: function(oldValue, newValue) {\n      if (oldValue) Quagga.offProcessed(oldValue);\n      if (newValue) Quagga.onProcessed(newValue);\n    },\n  },\n  mounted: function() {\n    Quagga.init(this.quaggaState, function(err) {\n      if (err) {\n        return console.error(err);\n      }\n      Quagga.start();\n    });\n    Quagga.onDetected(this.onDetected);\n    Quagga.onProcessed(this.onProcessed);\n  },\n  destroyed: function() {\n    if (this.onDetected) Quagga.offDetected(this.onDetected);\n    if (this.onProcessed) Quagga.offProcessed(this.offProcessed);\n    Quagga.stop();\n  },\n};\n</script>\n\n<style scoped>\n.viewport {\n  position: relative;\n}\n\n.viewport canvas,\n.viewport video {\n  position: absolute;\n  left: 0;\n  top: 0;\n}\n</style>\n"]}]}